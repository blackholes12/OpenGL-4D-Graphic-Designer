#version 440
in vec2 vs_texcoord;
out vec4 fs_color;
layout (binding = 0) uniform sampler2D tex2D;
uniform vec2 scale2D;
uniform int level;
uniform int type;
vec4 col4;

vec4 texture(vec2 texcoord,ivec2 offset)
{
    ivec2 texcoord2=ivec2(scale2D*texcoord)+offset;
    if(texcoord2.x<0)texcoord2.x=0;
    else if(texcoord2.x>=int(scale2D.x))texcoord2.x=int(scale2D.x)-1;
    else if(texcoord2.y<0)texcoord2.y=0;
    else if(texcoord2.y>=int(scale2D.y))texcoord2.y=int(scale2D.y)-1;
    return texelFetch(tex2D,texcoord2,0);
}

vec4 texture_bloom(vec2 texcoord,int type0)
{
    int level2=int(pow(2.f,level));
    vec4 color4;
    if(type0==0)
    {
        color4=
        (texture(texcoord,ivec2(-5*level2,0))+
        2.f*texture(texcoord,ivec2(-4*level2,0))+
        3.f*texture(texcoord,ivec2(-3*level2,0))+
        4.f*texture(texcoord,ivec2(-2*level2,0))+
        5.f*texture(texcoord,ivec2(-1*level2,0))+
        6.f*texture(texcoord,ivec2(0))+
        5.f*texture(texcoord,ivec2(1*level2,0))+
        4.f*texture(texcoord,ivec2(2*level2,0))+
        3.f*texture(texcoord,ivec2(3*level2,0))+
        2.f*texture(texcoord,ivec2(4*level2,0))+
        texture(texcoord,ivec2(5*level2,0)))/13.175f;
    }
    else
    {
        color4=
        (texture(texcoord,ivec2(0,-5*level2))+
        2.f*texture(texcoord,ivec2(0,-4*level2))+
        3.f*texture(texcoord,ivec2(0,-3*level2))+
        4.f*texture(texcoord,ivec2(0,-2*level2))+
        5.f*texture(texcoord,ivec2(0,-1*level2))+
        6.f*texture(texcoord,ivec2(0))+
        5.f*texture(texcoord,ivec2(0,1*level2))+
        4.f*texture(texcoord,ivec2(0,2*level2))+
        3.f*texture(texcoord,ivec2(0,3*level2))+
        2.f*texture(texcoord,ivec2(0,4*level2))+
        texture(texcoord,ivec2(0,5*level2)))/13.175f;
    }
    return color4; 
}

void main()
{
col4=texture_bloom(vs_texcoord,type);
fs_color = vec4(col4.xyz,1.f);
};