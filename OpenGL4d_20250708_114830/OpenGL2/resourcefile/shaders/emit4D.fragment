#version 440
#define PI 3.1415926535f
#define MaxWater4DAmount 12
in vec4 vs_position;
in vec4 vs_normal;
in vec3 vs_texcoord;
out vec4 fs_color;
vec4 col4;
float height;
struct DirectionLight4D
{
	vec4 direction4D;
	float intensity;
	vec3 color;
};

struct WaterArea4D
{
vec4 position4d;
vec4 scale4D;
};

uniform vec4 paintingColor;
layout (binding = 0) uniform sampler3D texture3D;
layout (binding = 9) uniform sampler3D area;
layout (binding = 10) uniform sampler3D deleteMap3d;
uniform bool isFog;
uniform float fogDensity;
uniform bool isAreaDeleting=false;

uniform int Water4DAmount;
uniform WaterArea4D[MaxWater4DAmount] waterArea4D;
uniform vec4 cameraPos;
uniform bool isACES;
uniform float adaptedLum;
uniform DirectionLight4D directionLight4d;

float[MaxWater4DAmount] waterHeight;
float[MaxWater4DAmount] waterDepth;
bool[MaxWater4DAmount] isWater;
bool isWater0=false;
float factor=0.f;
float directionFinal2=0.f;
float calculate_direction(vec4 vs_normal, vec4 direction)
{
	directionFinal2 = -dot(normalize(direction),vs_normal);
	return max(directionFinal2,0.f);
}
//const vec3 skyColor=vec3(0.f);
//const vec3 skyColor2=1.1f*vec3(63.f,55.f,43.f)/255.f;
//const vec3 skyColor3=1.1f*vec3(94.f,101.f,102.f)/255.f;
//const vec3 skyColor4=1.1f*vec3(103.f,120.f,138.f)/255.f;
//const vec3 skyColor5=1.1f*vec3(132.f,159.f,201.f)/255.f;
const vec3 skyColor1=vec3(0.f);
const vec3 skyColor2=vec3(7.f,7.f,10.f)/256.f;
const vec3 skyColor3=vec3(11.f,18.f,31.f)/256.f;
const vec3 skyColor4=vec3(13.f,24.f,47.f)/256.f;
const vec3 skyColor5=vec3(23.f,47.f,103.f)/256.f;
vec3 global_sky_color()
{
    float sunLightHeight=-normalize(directionLight4d.direction4D).y;
    if(sunLightHeight<-0.07f)
    {
    return skyColor1;
    }
    else if(sunLightHeight>=-0.07f&&sunLightHeight<0.f)
    {
    return mix(skyColor1,skyColor2,(sunLightHeight+0.07f)/0.07f);
    }
    else if(sunLightHeight>=0.f&&sunLightHeight<0.1f)
    {
    return mix(skyColor2,skyColor3,(sunLightHeight)/0.1f);
    }
    else if(sunLightHeight>=0.1f&&sunLightHeight<0.2f)
    {
    return mix(skyColor3,skyColor4,(sunLightHeight-0.1f)/0.1f);
    }
    else if(sunLightHeight>=0.2f)
    {
    return mix(skyColor4,skyColor5,(sunLightHeight-0.2f)/0.8f);
    }
}

float viewDistance;

vec3 fog(vec3 A,vec3 B,float far)
{
return mix(B,A,exp(-far));
}

vec4 inverse_gamma(vec4 x)
{
   return vec4(pow(x.xyz,vec3(2.2f)),x.w);
}

vec4 sRGB_to_rgb_space(vec4 x)
{
   return vec4(
   x.x<=0.04045f?x.x/12.9f:pow((x.x+0.055f)/1.055f,2.4f),
   x.y<=0.04045f?x.y/12.9f:pow((x.y+0.055f)/1.055f,2.4f),
   x.z<=0.04045f?x.z/12.9f:pow((x.z+0.055f)/1.055f,2.4f),
   x.w);
}

vec3 aces(vec3 color,float adaptedLum) {
    color*=adaptedLum;
    return (color * (2.51f * color + 0.03f)) / (color * (2.43f * color + 0.59f) + 0.14f);
}

// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT
const mat3 aces_input_mat = mat3(
    0.59719, 0.07600, 0.02840,
    0.35458, 0.90834, 0.13383,
    0.04823, 0.01566, 0.83777
    );

// ODT_SAT => XYZ => D60_2_D65 => sRGB
const mat3 aces_output_mat = mat3(
    1.60475, -0.10208, -0.00327,
    -0.53108,  1.10813, -0.07276,
    -0.07367, -0.00605,  1.07602
    );

vec3 rrt_and_odt_fit(vec3 v)
{
    vec3 a = v * (v + 0.0245786) - 0.000090537;
    vec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;
    return a / b;
}

vec3 aces_fitted(vec3 color,float adaptedLum)
{
    color*=adaptedLum;
	color = aces_input_mat * color;
    color = rrt_and_odt_fit(color);
    color = aces_output_mat * color;
    return clamp(color, 0.0, 1.0);
}

void main()
{
if(Water4DAmount>0)
{
height=vs_position.y;
for(int j=0;j < Water4DAmount;j++)
	{
	isWater[j]=false;
	if(
	abs(vs_position.x-waterArea4D[j].position4d.x)<=waterArea4D[j].scale4D.x/2.f&&
	abs(vs_position.y-waterArea4D[j].position4d.y+waterArea4D[j].scale4D.y/4.f)<=waterArea4D[j].scale4D.y/4.f&&
	abs(vs_position.z-waterArea4D[j].position4d.z)<=waterArea4D[j].scale4D.z/2.f&&
	abs(vs_position.w-waterArea4D[j].position4d.w)<=waterArea4D[j].scale4D.w/2.f)
	{
	isWater[j]=true;
    isWater0=true;
	waterHeight[j]=waterArea4D[j].position4d.y;
    if(height<waterHeight[j])
    {
         waterDepth[j]=-height+waterHeight[j];
	}
    }
}
}

col4=sRGB_to_rgb_space(texture(texture3D,vs_texcoord));
col4*=paintingColor;
if(isFog)
{
if(isWater0==false)
{
vec3 directionLightColor;
if(directionLight4d.direction4D.y<0.0043633f)
{
directionLightColor=directionLight4d.color;
if(directionLight4d.direction4D.y>-0.0043633f)
{
directionLightColor=mix(directionLightColor,vec3(0.f),smoothstep(0.f,1.f,(directionLight4d.direction4D.y+0.0043633f)/(0.0043633f*2.f)));
}
}
else
{
directionLightColor=vec3(0.f);
}
vec3 globalSkyColor=global_sky_color();
vec3 fogColor=(globalSkyColor+0.55f*(directionLight4d.color*directionLight4d.intensity*calculate_direction(vec4(0.f,1.f,0.f,0.f),directionLight4d.direction4D)+globalSkyColor))/2.f+directionLightColor/PI;
viewDistance=length(cameraPos-vs_position);
factor=fog(vec3(0.f),vec3(1.f),viewDistance*0.03861f*fogDensity).x;
if(viewDistance<100000)
col4.xyz=fog(col4.xyz,fogColor,viewDistance*0.03861f*fogDensity);
else
col4.xyz=fog(col4.xyz,fogColor,0.5f);
}
}

if(Water4DAmount>0)
{
viewDistance=length(cameraPos-vs_position);
for(int k=0;k < Water4DAmount;k++)
{
   if(isWater[k]==true)
   {
if(height<waterHeight[k])
{
if(cameraPos.y>waterHeight[k])
{
col4.xyz=mix(col4.xyz,(global_sky_color()-directionLight4d.color*directionLight4d.direction4D.y)/4.f,clamp(1.f-exp(-0.53333f*waterDepth[k]),0.f,1.f));
}
if(cameraPos.y<=waterHeight[k])
{
col4.xyz=fog(col4.xyz,vec3(0.1875f,0.4f,0.79f),viewDistance*0.1f);
}
}
   }
}
}

if(isACES)col4.xyz = aces_fitted(col4.xyz,adaptedLum);

//
if(isAreaDeleting)
{
int isDeleteArea=int(255.f*texelFetch(deleteMap3d,ivec3(vs_position.xzw+vec3(64)),0).r);
if(isDeleteArea==1){
col4.xyz+=texture(area,vs_position.xzw).xyz;
}
}
//

fs_color=col4;
}